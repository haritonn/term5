= Лекция 4 сентября 2025г.

== О курсе (`HTML`, `CSS`, `JavaScript`)
Весь курс будет проходить на платформе Яндекс. По успешному выполнению финального проекта дают сертификат.

Как уже известно, курс посвящён фронтенд разработке, а 1-й семестр - простой вёрстке (`JavaScript` вообще не будет).
В рамках курса делимся на 2(3) подгруппы: Иванова, Хамутова (и м.б. Забоев).

В качестве документации можно использовать сайт #link("doka.guide/html/html")

== Основная структура
Файл `html` содержит разделы `<html>`, `<head>`, `<body>`. `<html>` содержит в себе весь файл, `<head>` содержит основную мета-информацию и информацию о `header`
(внешний вид вкладки, `favicon` и т.д.), а также логику подключения файлов. `<body>` содержит основной контент страницы (90% того, что видит пользователь).

== Какой может быть ссылка?
```html
href = "<content>"
```
При оставлении поля пустым получится _якорная_ ссылка, которая ничего не делает. Ссылка `href="#"` поднимает страницу в самое начало. Можно указать ключевое слово
`target`, при значении `_blank` открывает ссылку на новой странице. Можно указать `rel='norefener'` (*УТОЧНИТЬ В ДОКУМЕНТАЦИИ*), чтобы внешний сайт ничего не узнал о нашем сайте
(тоже желательно уточнить, определённая мера безопасности).

== Какими могут быть картинки?
Картинкам можно указать ссылку на саму картинку, `alt` указывает альтернативное название на случай, если картинка не загрузится, `caption` означает подпись картинки (ну и `width`
, `height` само собой).

== `Box-sizing`

Вообще, наши объекты устроены так (от внешних границ к внутренним): `margin` -> `border` -> `padding` -> `content`. Можно регулировать так:
```css
.first {
    box-sizing: content-box;
    ...
}
```
Если задать значение border-box для свойства box-sizing, то браузер изменит принцип расчёта и padding с border уже будут включены в width и height.

Рассмотрим пример:
```css
.first {
  box-sizing: content-box;
  background-color: #2E9AFF;
}

.second {
  box-sizing: border-box;
  background-color: #F498AD;
}
```

#figure(
  image("media/box-sizing.png")
)

При `content-box`, ширина элемента рассчитывается следующим образом:
Ширина контентной области (100) + внутренний отступ слева и справа (25 + 25) + ширина правой и левой рамок (10 + 10). Итого: 170 пикселей.
Аналогично с высотой.
Выходит что первый элемент получил размеры 170 х 170.

Размер второго элемента считается иначе. Из-за значения свойства `box-sizing` браузер воспринимает `width` и `height` как конечные размеры элемента.
Получается что в 100 пикселей указанной ширины уже включены и внутренние боковые отступы и боковые рамки. Размеры второго элемента будут 100 х 100.

Таким образом:
- `content-box` --- значение по умолчанию. Финальная ширина: ширина + правый (и левый) внутренние отстутпы + правый (и левый) внешние отступы + обводка;
- `border-box` --- параметры `width`, `height` интерпретируются как итоговая ширина и высота.
