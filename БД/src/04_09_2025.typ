= Лекция 4 сентября 2025г.

== О курсе
Курс называется "Базы_Данных_ФИИТ_ПИ_ИВТ". Кодовые слова:
- "2025_311_1";
- "2025_311_2".

Правила курса: автоматом можно получить только 2 и 5. Для оценки 5:
- *Все* задания *в срок* (Темы 2-9, факультатив---дополнительный);
(последним заданием курса является разработка интерфейса);
- Самый сложный момент --- построение реалиционных структур данных (примеры в курсе сознательно не дописаны, т.е. представлена
только некоторая идея, а далее --- разработка самостоятельная);
- Допуск к экзамну: 7 заданий (на последних парах *НЕ* будут принимать много задач);
- На курсе есть книги, хороший источник --- русский сайт `postgres pro`;
- Нет штрафа за количество попыток.

== Книги
- Дейт "Введение в СУБД" 6-е издание;
- Пушников "СУБД".

#pagebreak()
== Очень общие понятия
*Определение.* База данных (БД) --- набор постоянных данных, которые используются прикладными системами для какого-либо предприятия.

*Определение.* Система управления базами данных (СУБД) --- программно-аппаратный комплекс - обеспечивает сохранность, целостность данных,
доступ пользователей к данным.

*Определение.* Система баз данных --- это, по сути, не что иное, как компьютеризированная система хранения записей. Саму же базу данных можно
рассматривать как подобие электронной картотеки, т.е. хранилище для некоторого набора занесенных в компьютер файлов данных.
(где файл --- абстрактный набор данных) (Определение по _К.Дейту_).

Первые БД были созданы на основе файловых систем. Для каждой прикладной программы предоставлялся свой набор данных, оформленный в виде файла
со своей структурой. Проблема: _ФС_ не знает конкретной структуры файла: структура записи файла известна только программе,
которая с ним работает.

== Базовые понятия реляционных БД
Основные понятия --- тип данных, домен, атрибут, кортеж, первичный ключ и отношение.

*Определение.* Понятие _тип данных_ в реляционной модели данных полностью соответствует понятию типа данных в языках программирования.
Обычно в современных РБД допускается хранение символьных числовых данных, битовых строк, специализированных числовых данных
(например, деньги), а также специальных "темпоральных" данных (дата, время, временной интервал).

*Определение.* Понятие _домена_ более специфично для баз данных, хотя и имеет некоторые аналогии с подтипами в некоторых ЯП. Стоит понимать домен
как допустимого потенциального множества значений данного типа. Например, в число значений домена "Имена" могут входить только те строки,
которые могут изображать имя. Данные считаются _сравнимыми_ только в том случае, если они относятся к одному домену.

*Определение.* Фундаментальным понятием реляционной модели данных является понятие _отношения_. _Атрибут отношения_ есть пара вида

$<"Имя_атрибута": "Имя_домена">$

Имена атрибутов должны быть уникальны в пределах отношения. Часто имена атрибутов в отношениях совпадают с именами соответствующих доменов.

_Отношение R_, определенное на множестве доменов $D_1, ..., D_n$ (не обязательно различных), содержит 2 части: заголовок и тело. _Заголовок отношения_ содержит
фиксированное количество атрибутов отношения:

$(<A_1:D_1>, ..., <A_n:D_n>)$

_Тело отношения_ содержит множество кортежей отношения. Каждый _кортеж отношения_ представляет собой множество пар вида

$(<A_1:V a l_1>, ..., <A_n:V a l_n>)$
таких что значение $V a l_i$ атрибута $A_i$ принадлежит домену $D_i$. Отношение обычно записывают как

$R(<A_1:D_1>, ..., <A_n:D_n>)$
или $R(A_1, ..., A_n)$ или просто $R$.

*Определение.* _Реляционной базой данных_ называется набор отношений.

*Определение.* _Схемой РБД_ называется набор заголовков отношений, входящих в БД.

== Свойства отношений
+ _В отношении нет одинаковых кортежей_. Тело отношений есть множество кортежей и, как всякое множество, не может содержать
  неразличимые элементы. Таблицы в отличие от отношений могут содержать одинаковые строки;
+ _Кортежи не упорядочены (сверху вниз)_. Порядок атрибутов в таблице не несёт никакой смысловой нагрузки;
+ _Атрибуты не упорядочены (слева направо)_. Т.к. каждый атрибут имеет уникальное имя в пределах отношения, то порядок
  атрибутов не имеет значения;
+ _Все значения атрибутов атомарны_. В ячейки таблиц можно поместить что угодно --- массивы, структуры, и даже другие таблицы.

== Первая нормальная форма.
Труднее всего дать определение вещей, которые всем понятны. Именно такая ситуация с определением отношения в _Первой Нормальной
Форме_ (1НФ).

_Объяснение._ Говорят, что отношение _R_ находится в 1НФ, если оно удовлетворяет определению 2 (как в презентации). Говорят, что отношение _R_
находитя в 1НФ, если его атрибуты содержат только скалярные (_атомарные_) значения.

== Целостность реляционных данных.
Существует два ограничения, которые должны выполняться любой РБД. Это:
- *Целостность сущностей*;
- *Целостность внешних ключей*.
Прежде чем говорить о целостности сущностей, опишем использование `null`-значений в РБД.

_Парадокс 1_. `null` значение не равно самому себе. Выражение `null=null` даёт значение НЕИЗВЕСТНО.

_Парадокс 2_. Также неверно, что `null` значене не равно самому себе. Выражение `null <> null` также принимает значение
НЕИЗВЕСТНО.

_Парадокс 3_. `a or (not a)` не обязательно ИСТИНА. Значит, в трехзначной логике не работает принцип исключительного третьего
(любое высказывание либо истинно, либо ложно).

Важно: если атрибут существеннен для построения БД, то он никогда не может принимать `null`.

== Потенциальные ключи
*Определение.* Пусть дано отношение _R_. Подмножество атрибутов _K_ отношения _R_ будем называть _потенциальным ключом_, если
_K_ обладает следующими свойствами:
- В отношении _R_ не может быть двух различных кортежей, с одинаковым значением _K_;
- Никакое подмножество в _K_ не обладает свойством уникальности.

Потенциальный ключ, состоящий из одного атрибута, называется _простым_, а из нескольких атрибутов --- _составным_.
Традиционно, один из потенциальных ключей объявляется _первичным_, а остальные --- _альтернативными_.

#underline([Замечание.]) Поняти потенциального ключа является _семантическим_ понятием и отражает
некоторый смысл (трактоку) понятий из конкретной предметной области.

Также сущесвует т.н. _фиктивный_ ключ.
